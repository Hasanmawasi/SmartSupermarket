  
<div class="main-log d-flex flex-column">
  <div class="log-container ">
      <%- include('../modals/alertModal.ejs') %>
    <h2>Daily Log</h2>
    <p class="description">Submit your arrival and departure times. Please wait for admin approval after each submission.</p>
    <form action="/worker/submitArrival" method="POST">
      <input type="hidden" name="type" value="arrival">
      <% if (locals.a_status){ %>
        <button id="arrivalButton" class="log-button" disabled>
          <i class="fas fa-sign-out-alt"></i> <%= locals.a_status %>
        </button>
        <% } else { %>
        <button id="arrivalButton" class="log-button" >
        <i class="fas fa-sign-out-alt"></i> Log Arrival
        </button>
        <% } %>
    </form>
    <form action="/worker/submitDeparture" method="POST">
      <input type="hidden" name="type" value="departure">
    <% if (locals.d_status){ %>
      <button id="departureButton" class="log-button" disabled>
        <i class="fas fa-sign-out-alt"></i> <%= locals.d_status %>
      </button>
      <% } else { %>
      <button id="arrivalButton" class="log-button" >
      <i class="fas fa-sign-out-alt"></i> Log Departure
      </button>
      <% } %>
    </button>
    </form>
    <% if (locals.message){ %>
        <div id="statusMessage" class="status pending">Status: <%= message %></div>
    <% } else {%>
        <div id="statusMessage" class="status pending">Status: Awaiting arrival log</div>
    <% } %>
    <div class="timer-container mt-2">
      <h2 class="fw-bold text-white ">Work Timer</h2>
      <div class="timer text-white">
          <span id="hours">00</span>:<span id="minutes">00</span>:<span id="seconds">00</span>
      </div>
  </div>
  </div>
  
  
  <div class="schedule-container">
    <div class="schedule-heading">Weekly Work Schedule</div>
    <table>
      <thead>
        <tr>
          <th>Day</th>
          <th>Shift Start</th>
          <th>Shift End</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <% if (locals.schedule) {%>
          <% schedule.forEach((day) => { %>
            <tr>
              <td><%= day.day_of_week %></td>
              <td><%= day.start_time ? day.start_time : '-' %></td>
              <td><%= day.end_time ? day.end_time : '-' %></td>
              <td> <% if (day.status === 'full-time') { %>
                  <span class="badge badge-available"><%=day.status%></span>
                <% } else if (day.status === 'part-time') { %>
                  <span class="badge badge-halfday"><%=day.status%></span>
                <% } else if (day.status === 'Off') { %>
                  <span class="badge badge-off"><%=day.status%></span>
                <% }  %>
                  </td>
            </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="4">Schedule not set yet!</td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  </div>
  <style>
    
  </style>
<script src="/socket.io/socket.io.js"></script>
<script>
          
          let intervalId; 

const initializeTimer = () => {
    const hoursEl = document.getElementById('hours');
    const minutesEl = document.getElementById('minutes');
    const secondsEl = document.getElementById('seconds');

    
    let startTime = localStorage.getItem('timerStartTime') 
    if (!startTime) {
     
        startTime = new Date();
        localStorage.setItem('timerStartTime', startTime);
    } else {
       
        startTime = new Date(startTime);
    }

    const updateTimer = () => {
        const currentTime = new Date();
        const elapsedTime = Math.floor((currentTime - startTime) / 1000);

        const hours = Math.floor(elapsedTime / 3600);
        const minutes = Math.floor((elapsedTime % 3600) / 60);
        const seconds = elapsedTime % 60;

        
        hoursEl.textContent = hours.toString().padStart(2, '0');
        minutesEl.textContent = minutes.toString().padStart(2, '0');
        secondsEl.textContent = seconds.toString().padStart(2, '0');
    };

    intervalId = setInterval(updateTimer, 1000);
    updateTimer();
};


const stopTimer = () => {
    clearInterval(intervalId); 
    localStorage.removeItem('timerStartTime'); 
    console.log("Timer stopped!");
};



    const socket = io();
    socket.on('accepted-login',(response)=>{
        const notificationSound = new Audio('/sounds/mixkit-software-interface-back-2575.mp3'); // Path to your sound file
        notificationSound.play().catch((error) => {
       console.error("Audio playback failed:", error);
       });
        let arrivalbtn = document.getElementById('arrivalButton');
        let message= document.getElementById("statusMessage")    
             
        if(response == 'accepted'){
            arrivalbtn.innerHTML = "accepted";
            message.innerHTML='Arrival log is Accepted';
            const simulatedStartTime = new Date();
            initializeTimer(simulatedStartTime);
        }else if(response == 'rejected'){
            arrivalbtn.innerHTML = "rejected";
             message.innerHTML='Arrival log is rejected';
        }
    });

    socket.on('accepted-departure',(response)=>{
        const notificationSound = new Audio('/sounds/mixkit-software-interface-back-2575.mp3'); // Path to your sound file
      notificationSound.play().catch((error) => {
      console.error("Audio playback failed:", error);
     });
        let departurebtn = document.getElementById('departureButton')
        let message= document.getElementById("statusMessage") 
        if(response == 'accepted'){
            departurebtn.innerHTML = "accepted";
             message.innerHTML='Departure log is Accepted';
             stopTimer();
        }else if(response == 'rejected'){
            departurebtn.innerHTML = "rejected";
             message.innerHTML='Arrival log is rejected';
        }
    });

</script>